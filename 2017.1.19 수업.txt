2주차 Network Programming & Web
0119 

강의목표!! 
어떻게 이용할 것인가??

1. Java Thread 의 이해!
 여러사람이 이용할 때, Thread 가 뭔지 / 어떻게 이용하는지

2. Java IO의 이해
 Stream 을 사용하는데, 어떻게 처리해야 하는지

3. Network
 여러사람들과 소통할 때 어떻게 차리하는지 생각한다!


Thread - thread를 직접 design을 많이 하지는 않는다. 여러가지를 이용할 때, Thread의 개념이 필요하다. Thread의 동기화 
이해를 목적으로 듣자

Multi processing  - 다중처리를 한다. CPU는 한순간에 하나의 일만 할 수 있다. CPU(Core)가 2개 이상일 때 의미가 있다. 동시에 여러가지 일을 할 수 있다.

Multi Tasking - 하나의 Core를 놓고 봤을 때, Time Slicing(시분할) 을 하여 여러가지 번갈아가면서 일을 한다. 사실은 한순간에 한가지 일만 하지만, 우리가 느끼기에는 하나의 Core로 여러가지 일을 하는 것 느낀다.
Core 개수와는 상관 없이, 하나의 core가 시분할을 통해서 여러작업을 번갈아가면서 처리하는 방식

Mulit Threading - 시작하는 시점(Main Method)과 끝나는 시점 -> 하나의 실행 흐름!! 한 프로그램 내에서 여러개의 독립 작업이 동시에 진행될 수 있다!!

-----------------------------------------------------------------------------------------------------------------------------------------------
Java프로그램은 언어차원에서 Multi Thread기능을 지원해주는 기능이다.

Thread가 어려운 이유는 '동기화' 떄문이다. 이를 잘 이해하고 이용해야 한다.

Thread의 기능에는 다음과 같이 나눌 수 있다.
 - Thread 의 생성과 종료 (start, interrupt)
 - Thread 의 제어 ( sleep , yield, daemon, setPriority, join)
 - Thread 의 상태전이도

Java Thread States (Thread 의 상태)

 - Runnable -> 실행을 시작할 수 있는 대기상태 (start() method를 입력받은 상태)
Thread를 어떤걸 먼저 시작할지는 OS수업에서 Scheduleing을 통해 정한다. (가장 먼저 입력받은 method부터 구현할지 , 시간이 덜 걸리는 method 부터 구현할지 등)

 - Running -> 실제 실행상태 ( 호출된 상태)
 - Dead -> Thread가 종료된 상태 (한 번 폐기된 Thread는 다시 사용될 수 없다.)


Thread라는 Class를 Java에서 지원해준다. Thread class를 만들려면 어떻게 해야하는가??? 

1. Thread class 상속 (상속의 경우 class간의 결합도가 높아지고 )
package basicthread;

// 이 방식은 상속을 받았기 때문에 우리 class( MyThread) 의 사용이 많이 제약된다.
public class MyThread extends Thread {

	// 새로운 실행 흐름을 만들고 싶을 때는 run이라는 method를 override 해야한다.
	@Override
	public void run() {
		// 새로운 실행흐름에 대한 코드를 작성
		
		for(int i=0; i<10; i++){
			System.out.println("현재의 i 값은 : " + i );
			try {
				Thread.sleep(1000);
				//예외의 상황이 생길 수 있기 때문에 예외처리를 해야한다.
			} catch (Exception e) {
				System.out.println(e);
			}
		}
		// 내가 원하는 시간만큼 중지시킬 수 있는 method가 있다.
		// sleep이라는 static method는 잠깐 시간동안 멈췄다가 다시 시작한다. ( sleep 의 안에는 ms 단위이다)
		// 현재 수행되고 있는 Thread를 재우라는 말이다.
		super.run();
	}

	//하위클래스는 곧 상위클래스이다. (Is - A 관계 )  MyThread라는 class는 Thread 클래스이다.
	
	// 독립적인 실행흐름을 만들기 위해 특수한 method를 overriding 해야!
	
}

package basicthread;

public class Main {

	//현재 우리프로그램은 main thread 하나만 존재하는 단일 Thread 프로그램이에요!
	//프로그램이 종료된다는 의미는 해당 프로그램 내에서 생성된 모든 thread가 종료되면 프로그램이 종료된다고 표현한다!!
	public static void main(String[] args) {
		// 프로그램의 Entry point
		
		System.out.println("메인이 시작되었어요!!");
		
		//Thread 객체를 하나 생성
		MyThread t = new MyThread();
		// 객체에 대한 method 호출!
//		t.run(); // 이렇게 Thread를 실행시키는게 아닙니다!!! 잘못된 코드다! 조심!!!
		t.start(); //Thread를 실행시키는 method!!! Thread의 class에 있는 method이다.
		// start라는 method를 호출하면 요상한 현상이 발생!
		// java 프로그램은 JVM이 모든 실행을 관장한다! / JVM안에 Thread Scheduler라는게 존재한다! (어떤 thread를 먼저 실행시키고 어떤 것은 나중에 시켜주는지 정해주는 역할)
		// JVM이 프로그램을 실행시켜주는 주체이다! 내가 아니다. 나는 직접 Thread를 실행시킬 수 없다.
		// Scheduler에게 부탁한다. ( 해당 Thread를 시간될 때 실행시켜주세요!!) 어떤 Thread가 실행되는지 프로그램 측면에서는 알수가 없다. -> 이것이 Thread를 관리하는데 가장 어려운 점이다.
		// Thread가 언제 실행되는지에 대한 시점을 우리가 정확히 파악할 수 없다.
		
		//start라는 method는 우리가 일반적으로 사용하는 method처럼 blocking이 되지 않는 method이다.
		// 대부분의 method는 그 method가 실행이 되고 그 method가 끝나야 다른 게 실행된다.
		// start라는 method는 JVM에게 thread를 시작해달라고만 부탁만 하고 끝난다.
		// server에 여러사람이 동시에 수행하는 프로그램을 만드려면 Thread가 꼭 있어야한다.
		System.out.println("메인이 종료되요!!!");
		// main method가 끝나면 프로그램이 종료! 단일 쓰레드 프로그램
	}

}


2. Runnable interface 구현 ( 더 좋은 방법이다.)

public class MyThread implements Runnable




Thread 의 종료

Main Thread가 있고, 

stop()이라는 method를 사용하여 Thread를 종료시킬 수 있었다. 하지만, 더이상 사용되지 않는다. (Deprecated)

종료하고자 하는 위치에 interrupt() method를 이용하여 종료할 곳을 표시하고, 
if(Thread.currentThread().isInterrupted()){ // 현재 수행되고 있는 Thread의 객체가 interrupt 되었어?? 만약 되었다면 if내에 수행을 이룬다.
	break; // 가장 인접한 반복문을 빠져나간다.
}
를 통해서 프로그램을 안전하게 종료한다.

package basicthread;

public class Main {

	//현재 우리프로그램은 main thread 하나만 존재하는 단일 Thread 프로그램이에요!
	//프로그램이 종료된다는 의미는 해당 프로그램 내에서 생성된 모든 thread가 종료되면 프로그램이 종료된다고 표현한다!!
	public static void main(String[] args) {
		// 프로그램의 Entry point
		
		System.out.println("메인이 시작되었어요!!");
		
		//Runnable Interface 를 구현한 객체를 하나 생성!
		MyThread t = new MyThread();
		Thread tt = new Thread(t);
		// Thread라는 객체에 runnable interface 객체를 넣어서 만들었다.
		// 하나의 객체를 다른 객체에 넣어주는 방식 (Dependency Injection)
		
		// 객체에 대한 method 호출!
//		t.run(); // 이렇게 Thread를 실행시키는게 아닙니다!!! 잘못된 코드다! 조심!!!
		tt.start(); //Thread를 실행시키는 method!!! Thread의 class에 있는 method이다.
		// start라는 method를 호출하면 요상한 현상이 발생!
		// java 프로그램은 JVM이 모든 실행을 관장한다! / JVM안에 Thread Scheduler라는게 존재한다! (어떤 thread를 먼저 실행시키고 어떤 것은 나중에 시켜주는지 정해주는 역할)
		// JVM이 프로그램을 실행시켜주는 주체이다! 내가 아니다. 나는 직접 Thread를 실행시킬 수 없다.
		// Scheduler에게 부탁한다. ( 해당 Thread를 시간될 때 실행시켜주세요!!) 어떤 Thread가 실행되는지 프로그램 측면에서는 알수가 없다. -> 이것이 Thread를 관리하는데 가장 어려운 점이다.
		// Thread가 언제 실행되는지에 대한 시점을 우리가 정확히 파악할 수 없다.
		
		//start라는 method는 우리가 일반적으로 사용하는 method처럼 blocking이 되지 않는 method이다.
		// 대부분의 method는 그 method가 실행이 되고 그 method가 끝나야 다른 게 실행된다.
		// start라는 method는 JVM에게 thread를 시작해달라고만 부탁만 하고 끝난다.
		// server에 여러사람이 동시에 수행하는 프로그램을 만드려면 Thread가 꼭 있어야한다.
		
		// Thread의 종료
		// tt.stop(); // 해당 method는 deprecated되었다. 가운데 줄이 그어져있다. stop이라는 method는 문제가 많다. 더 이상 쓰이지 않는다.
		tt.interrupt(); //scheduler한테 적당한 시기에 thread를 나갈 수 있도록 표시를 해준다.
		System.out.println("메인이 종료되요!!!");
		// main method가 끝나면 프로그램이 종료! 단일 쓰레드 프로그램
	}

}


 Thread의 제어

- 특이한 형태의 Thread를 한번 알아보자!

Daemon Tread ( setDaemon(true) )
결국은 프로그램이 종료되려면 프로그램내에서 파생된 모든 Thread가 종료되어야지 전체 프로그램이 종료되는 구조.
이 구조때문에 여러가지 문제가 파생되요 => Daemon Thread를 이용해서 이 문제를 해결
앱을 종료하고 나면 그에 파생된 모든 Thread들이 다 종료되어야 하는데, Background에 있는 Thread들이 종료되지 않으면, 앱은 종료되어도 계속 제품의 resource를 먹게된다. (배터리, 메모리 등등)
따라서, Main을 끄면 모든 Thread들이 다같이 종료될 수 있도록 만들고 싶다. -> Daemon Thread

join method()
Thread간의 실행순서를 우리가 프로그램적으로 제어하는게 상당히 어렵다!! -> join() method를 이용해서 순서를 제어
Main이 종료되고 그와 관련된 Thread가 다 종료되는데 지금 수행하고 있는 해당 thread가 종료될 때까지 기다릴 수 있게 해주는 method이다.
try catch문을 강제한다.


sleep() method
-> CPU점유를 중지하고 특정시간 동안 아무것도 안하고 Thread가 자고 있도록 하는 method
sleep(ms단위의 시간) 은 자는 시간이 정해질 수 있는 것이고, 그 시간이 지난후에 다시 running 상태로 되는 것이 아니라 runnable상태로 돌아가게 된다. 
따라서, 우리가 1초를 재운다고 해서 진짜 1초 자는 것이 아니다. Runnable 상태에서 바로 running이 될 수 있을지 보장할 수 없다.

따라서, 이제는 프로그램이 동시에 여러개가 수행되기 때문에 시간적으로 뒤죽박죽이 될 수 있다. 따라서, 입체적으로 프로그래밍을 생각할 수 있어야한다.
 try catch문을 강제한다.


yield() method

method 중 running이 되던 상태에서 CPU점유를 양보하고 다시 runnable 상태로 가는 기능


setPriority () method

 우선순위를 정할 수 있다. 하지만, 그 우선순위에 절대적이지는 않다. 왜냐하면 , 두개의 method의 우선순위가 달라서 무조건 높은게 먼저 시행이된다면 절차형식이랑 다를것이 하나없다.
그저 먼저 시행할 수 있는 확률을 높일 수는 있다. 
starvation method (굶주린 method) -> runnable 상태에 있는데 계속 선택을 못받아 대기하고 있는 method를 말한다. 이런 상황을 방지하기 위해 critical하진 않다.


------------------------------------------------------------------------------------------------------------------------------------------

동기화!!! 중요하다! (synchronization)

하나의 자원을 여러 Thread가 사용하려 할 때, 한 시점에 하나의 Thread만이 사용할 수 있도록 하는것을 의미
ex) 영화예매를 하는 사이트를 할 때, 내가 보는 시점에는 좌석예매가 가능해서 결재를 하려했는데, 결재를 끝내고 나니 해당좌석이 없다고 나온다. ( 내가 하는 동안에 다른 사람이 결재를 마친것이다.)
 동기화처리를 제대로 했다면, 내가 그 예약을 하는 동안(결재하는 동안)에는 그 좌석을 잡고있어야 한다. 공공자원에서 모든 사람이 동기화가 되어 정보를 봐야한다.

동시에 여러사람이 같은 일을 처리할 수 있어야한다. 
대부분의 웹서비스는 여러사람들이 동시에 처리하기 때문에 정말 중요한 기능이다!

Monitor 라는 기능
 = instance(공유자원)에 Thread가 접근하는 것을 제어하기 위해서 Monitor라는 것을 제공 
 Monitor를 얻은 사람만 공유자원을 사용할 수 있는 권한을 준다. Monitor를 얻지 못한 사람들은 접근이 되지 않는다.(대기)


접속하는 것은 동시처리 ->  좌석을 보고 결재하는 그 과정(Monitor를 얻는 과정) 은 순차처리가 되야한다. 그래야지 data의 오염을 막을 수 있다.













